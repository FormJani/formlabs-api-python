# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from formlabs_web_api.models.my_print_run_read_only import MyPrintRunReadOnly

class TestMyPrintRunReadOnly(unittest.TestCase):
    """MyPrintRunReadOnly unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MyPrintRunReadOnly:
        """Test MyPrintRunReadOnly
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MyPrintRunReadOnly`
        """
        model = MyPrintRunReadOnly()
        if include_optional:
            return MyPrintRunReadOnly(
                guid = '',
                name = '',
                printer = '',
                status = 'QUEUED',
                using_open_mode = True,
                z_height_offset_mm = 1.337,
                print_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                print_finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                layer_count = 56,
                volume_ml = 1.337,
                material = '',
                layer_thickness_mm = 1.337,
                currently_printing_layer = 56,
                estimated_duration_ms = 56,
                elapsed_duration_ms = 56,
                estimated_time_remaining_ms = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                print_run_success = formlabs_web_api.models.print_run_success.PrintRunSuccess(
                    print_run = '', 
                    print_run_success = 'UNKNOWN', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                feedback = formlabs_web_api.models.print_run_feedback.PrintRunFeedback(
                    print_run = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    issue_category = '', 
                    issue_subcategory = '', 
                    issue_description = '', 
                    form_file_exists = True, ),
                firmware_version = '',
                cartridge = '',
                front_cartridge = '',
                back_cartridge = '',
                tank = '',
                cylinder = '',
                note = formlabs_web_api.models.print_run_note.PrintRunNote(
                    print_run = '', 
                    note = '', 
                    author = formlabs_web_api.models.basic_user.BasicUser(
                        id = 56, 
                        username = 'A', 
                        first_name = '', 
                        last_name = '', 
                        email = '', ), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                print_thumbnail = formlabs_web_api.models.print_thumbnail_serializer_only_thumbnail.PrintThumbnailSerializerOnlyThumbnail(
                    thumbnail = '', ),
                post_print_photo_url = '',
                user = formlabs_web_api.models.basic_user.BasicUser(
                    id = 56, 
                    username = 'A', 
                    first_name = '', 
                    last_name = '', 
                    email = '', ),
                user_custom_label = '',
                group = formlabs_web_api.models.printer_group.PrinterGroup(
                    id = '', 
                    name = '', ),
                adaptive_thickness = True,
                probably_finished = True,
                message = '',
                print_job = '',
                material_name = '',
                print_settings_name = '',
                print_settings_code = '',
                form_auto_serial = '',
                form_auto_fw_version = '',
                harvest_status = 'FORM_CELL_HARVEST_UNKNOWN'
            )
        else:
            return MyPrintRunReadOnly(
                guid = '',
                name = '',
                printer = '',
                status = 'QUEUED',
                using_open_mode = True,
                z_height_offset_mm = 1.337,
                print_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                print_finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                layer_count = 56,
                volume_ml = 1.337,
                material = '',
                layer_thickness_mm = 1.337,
                currently_printing_layer = 56,
                estimated_duration_ms = 56,
                elapsed_duration_ms = 56,
                estimated_time_remaining_ms = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                print_run_success = formlabs_web_api.models.print_run_success.PrintRunSuccess(
                    print_run = '', 
                    print_run_success = 'UNKNOWN', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                feedback = formlabs_web_api.models.print_run_feedback.PrintRunFeedback(
                    print_run = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    issue_category = '', 
                    issue_subcategory = '', 
                    issue_description = '', 
                    form_file_exists = True, ),
                firmware_version = '',
                cartridge = '',
                front_cartridge = '',
                back_cartridge = '',
                tank = '',
                cylinder = '',
                note = formlabs_web_api.models.print_run_note.PrintRunNote(
                    print_run = '', 
                    note = '', 
                    author = formlabs_web_api.models.basic_user.BasicUser(
                        id = 56, 
                        username = 'A', 
                        first_name = '', 
                        last_name = '', 
                        email = '', ), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                print_thumbnail = formlabs_web_api.models.print_thumbnail_serializer_only_thumbnail.PrintThumbnailSerializerOnlyThumbnail(
                    thumbnail = '', ),
                post_print_photo_url = '',
                user = formlabs_web_api.models.basic_user.BasicUser(
                    id = 56, 
                    username = 'A', 
                    first_name = '', 
                    last_name = '', 
                    email = '', ),
                user_custom_label = '',
                group = formlabs_web_api.models.printer_group.PrinterGroup(
                    id = '', 
                    name = '', ),
                adaptive_thickness = True,
                probably_finished = True,
                message = '',
                print_job = '',
                material_name = '',
                print_settings_name = '',
                print_settings_code = '',
                form_auto_serial = '',
                form_auto_fw_version = '',
                harvest_status = 'FORM_CELL_HARVEST_UNKNOWN',
        )
        """

    def testMyPrintRunReadOnly(self):
        """Test MyPrintRunReadOnly"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
