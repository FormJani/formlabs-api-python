# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TankReadOnly(BaseModel):
    """
    TankReadOnly
    """ # noqa: E501
    serial: StrictStr
    material: Optional[StrictStr]
    print_time_ms: Optional[StrictInt]
    layers_printed: Optional[StrictInt]
    first_fill_date: Optional[datetime]
    heatmap: Optional[StrictStr] = None
    heatmap_gif: Optional[StrictStr]
    display_name: Optional[StrictStr] = None
    layer_count: StrictInt
    inside_printer: StrictStr
    tank_type: Optional[StrictStr]
    connected_group: Optional[StrictStr]
    created_at: Optional[datetime]
    last_print_date: Optional[datetime]
    __properties: ClassVar[List[str]] = ["serial", "material", "print_time_ms", "layers_printed", "first_fill_date", "heatmap", "heatmap_gif", "display_name", "layer_count", "inside_printer", "tank_type", "connected_group", "created_at", "last_print_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TankReadOnly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "serial",
            "material",
            "print_time_ms",
            "layers_printed",
            "first_fill_date",
            "heatmap_gif",
            "layer_count",
            "inside_printer",
            "tank_type",
            "connected_group",
            "created_at",
            "last_print_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if material (nullable) is None
        # and model_fields_set contains the field
        if self.material is None and "material" in self.model_fields_set:
            _dict['material'] = None

        # set to None if print_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.print_time_ms is None and "print_time_ms" in self.model_fields_set:
            _dict['print_time_ms'] = None

        # set to None if layers_printed (nullable) is None
        # and model_fields_set contains the field
        if self.layers_printed is None and "layers_printed" in self.model_fields_set:
            _dict['layers_printed'] = None

        # set to None if first_fill_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_fill_date is None and "first_fill_date" in self.model_fields_set:
            _dict['first_fill_date'] = None

        # set to None if heatmap_gif (nullable) is None
        # and model_fields_set contains the field
        if self.heatmap_gif is None and "heatmap_gif" in self.model_fields_set:
            _dict['heatmap_gif'] = None

        # set to None if tank_type (nullable) is None
        # and model_fields_set contains the field
        if self.tank_type is None and "tank_type" in self.model_fields_set:
            _dict['tank_type'] = None

        # set to None if connected_group (nullable) is None
        # and model_fields_set contains the field
        if self.connected_group is None and "connected_group" in self.model_fields_set:
            _dict['connected_group'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if last_print_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_print_date is None and "last_print_date" in self.model_fields_set:
            _dict['last_print_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TankReadOnly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serial": obj.get("serial"),
            "material": obj.get("material"),
            "print_time_ms": obj.get("print_time_ms"),
            "layers_printed": obj.get("layers_printed"),
            "first_fill_date": obj.get("first_fill_date"),
            "heatmap": obj.get("heatmap"),
            "heatmap_gif": obj.get("heatmap_gif"),
            "display_name": obj.get("display_name"),
            "layer_count": obj.get("layer_count"),
            "inside_printer": obj.get("inside_printer"),
            "tank_type": obj.get("tank_type"),
            "connected_group": obj.get("connected_group"),
            "created_at": obj.get("created_at"),
            "last_print_date": obj.get("last_print_date")
        })
        return _obj


