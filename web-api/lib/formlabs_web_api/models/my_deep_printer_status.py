# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from formlabs_web_api.models.build_platform_contents_enum import BuildPlatformContentsEnum
from formlabs_web_api.models.camera_status_enum import CameraStatusEnum
from formlabs_web_api.models.form_cell import FormCell
from formlabs_web_api.models.my_print_run_read_only import MyPrintRunReadOnly
from formlabs_web_api.models.ready_to_print_enum import ReadyToPrintEnum
from formlabs_web_api.models.tank_mixer_state_enum import TankMixerStateEnum
from typing import Optional, Set
from typing_extensions import Self

class MyDeepPrinterStatus(BaseModel):
    """
    MyDeepPrinterStatus
    """ # noqa: E501
    status: StrictStr
    last_pinged_at: Optional[datetime] = None
    hopper_level: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    material_credit: Optional[Union[StrictFloat, StrictInt]] = None
    hopper_material: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    last_modified: datetime
    current_temperature: Optional[Union[StrictFloat, StrictInt]] = None
    current_print_run: MyPrintRunReadOnly
    form_cell: FormCell
    last_printer_cooldown_started: Optional[datetime] = None
    outer_boundary_offset_corrections: Optional[Any] = None
    build_platform_contents: Optional[BuildPlatformContentsEnum] = None
    tank_mixer_state: Optional[TankMixerStateEnum] = None
    ready_to_print: Optional[ReadyToPrintEnum] = None
    printer_capabilities: Optional[List[Annotated[str, Field(strict=True, max_length=100)]]] = None
    printernet_capabilities: Optional[List[Annotated[str, Field(strict=True, max_length=100)]]] = None
    camera_status: Optional[CameraStatusEnum] = None
    __properties: ClassVar[List[str]] = ["status", "last_pinged_at", "hopper_level", "material_credit", "hopper_material", "last_modified", "current_temperature", "current_print_run", "form_cell", "last_printer_cooldown_started", "outer_boundary_offset_corrections", "build_platform_contents", "tank_mixer_state", "ready_to_print", "printer_capabilities", "printernet_capabilities", "camera_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MyDeepPrinterStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "status",
            "last_modified",
            "current_print_run",
            "form_cell",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_print_run
        if self.current_print_run:
            _dict['current_print_run'] = self.current_print_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of form_cell
        if self.form_cell:
            _dict['form_cell'] = self.form_cell.to_dict()
        # set to None if last_pinged_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_pinged_at is None and "last_pinged_at" in self.model_fields_set:
            _dict['last_pinged_at'] = None

        # set to None if hopper_level (nullable) is None
        # and model_fields_set contains the field
        if self.hopper_level is None and "hopper_level" in self.model_fields_set:
            _dict['hopper_level'] = None

        # set to None if material_credit (nullable) is None
        # and model_fields_set contains the field
        if self.material_credit is None and "material_credit" in self.model_fields_set:
            _dict['material_credit'] = None

        # set to None if current_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.current_temperature is None and "current_temperature" in self.model_fields_set:
            _dict['current_temperature'] = None

        # set to None if last_printer_cooldown_started (nullable) is None
        # and model_fields_set contains the field
        if self.last_printer_cooldown_started is None and "last_printer_cooldown_started" in self.model_fields_set:
            _dict['last_printer_cooldown_started'] = None

        # set to None if outer_boundary_offset_corrections (nullable) is None
        # and model_fields_set contains the field
        if self.outer_boundary_offset_corrections is None and "outer_boundary_offset_corrections" in self.model_fields_set:
            _dict['outer_boundary_offset_corrections'] = None

        # set to None if printernet_capabilities (nullable) is None
        # and model_fields_set contains the field
        if self.printernet_capabilities is None and "printernet_capabilities" in self.model_fields_set:
            _dict['printernet_capabilities'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MyDeepPrinterStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "last_pinged_at": obj.get("last_pinged_at"),
            "hopper_level": obj.get("hopper_level"),
            "material_credit": obj.get("material_credit"),
            "hopper_material": obj.get("hopper_material"),
            "last_modified": obj.get("last_modified"),
            "current_temperature": obj.get("current_temperature"),
            "current_print_run": MyPrintRunReadOnly.from_dict(obj["current_print_run"]) if obj.get("current_print_run") is not None else None,
            "form_cell": FormCell.from_dict(obj["form_cell"]) if obj.get("form_cell") is not None else None,
            "last_printer_cooldown_started": obj.get("last_printer_cooldown_started"),
            "outer_boundary_offset_corrections": obj.get("outer_boundary_offset_corrections"),
            "build_platform_contents": obj.get("build_platform_contents"),
            "tank_mixer_state": obj.get("tank_mixer_state"),
            "ready_to_print": obj.get("ready_to_print"),
            "printer_capabilities": obj.get("printer_capabilities"),
            "printernet_capabilities": obj.get("printernet_capabilities"),
            "camera_status": obj.get("camera_status")
        })
        return _obj


