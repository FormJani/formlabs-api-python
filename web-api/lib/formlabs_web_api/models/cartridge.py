# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from formlabs_web_api.models.machine_type_id_adb_enum import MachineTypeIdAdbEnum
from typing import Optional, Set
from typing_extensions import Self

class Cartridge(BaseModel):
    """
    Cartridge
    """ # noqa: E501
    serial: Annotated[str, Field(strict=True, max_length=255)]
    machine_type_id: Optional[MachineTypeIdAdbEnum] = Field(default=None, description="Available values are: `FORM-1-0` - Form 1   `FORM-1-1` - Form 1+   `FORM-2-0` - Form 2   `FORM-2-1` - Form 2.1   `FORM-3-0` - Form 3   `FORM-3-1` - Form 3   `FORM-3-2` - Form 3+   `DGJR-1-0` - Form 3   `FRML-3-0` - Form 3L   `FRBL-3-0` - Form 3BL   `FRMB-3-0` - Form 3B   `DGSR-1-0` - Form 3L   `FRMB-3-1` - Form 3B+   `PILK-1-0` - Fuse 1   `SIFT-1` - Sift   `UNKNOWN` - Unknown   `PILK-1-1` - Fuse 1   `SIFT-1-0` - Sift   `SIFT-1-1` - Sift   `CURL-1-1` - Cure L   `CURL-1-0` - Cure L   `WSHL-1-0` - Wash L   `FS30-1-0` - Fuse 1+ (30W)   `FS30-1-1` - Fuse 1+ (30W)   `FORM-4-0` - Form 4")
    material: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    initial_volume_ml: Optional[Union[StrictFloat, StrictInt]] = None
    volume_dispensed_ml: Optional[Union[StrictFloat, StrictInt]] = None
    dispense_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    write_count: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]] = None
    mechanical_version: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    manufacture_date: Optional[datetime] = None
    manufacturer: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    display_name: Optional[StrictStr] = None
    lot_number: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    last_modified: datetime
    is_empty: StrictBool
    inside_printer: StrictStr
    connected_group: Optional[StrictStr] = None
    created_at: Optional[datetime]
    last_print_date: Optional[datetime]
    __properties: ClassVar[List[str]] = ["serial", "machine_type_id", "material", "initial_volume_ml", "volume_dispensed_ml", "dispense_count", "write_count", "mechanical_version", "manufacture_date", "manufacturer", "display_name", "lot_number", "last_modified", "is_empty", "inside_printer", "connected_group", "created_at", "last_print_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cartridge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_modified",
            "is_empty",
            "inside_printer",
            "created_at",
            "last_print_date",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if material (nullable) is None
        # and model_fields_set contains the field
        if self.material is None and "material" in self.model_fields_set:
            _dict['material'] = None

        # set to None if dispense_count (nullable) is None
        # and model_fields_set contains the field
        if self.dispense_count is None and "dispense_count" in self.model_fields_set:
            _dict['dispense_count'] = None

        # set to None if connected_group (nullable) is None
        # and model_fields_set contains the field
        if self.connected_group is None and "connected_group" in self.model_fields_set:
            _dict['connected_group'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if last_print_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_print_date is None and "last_print_date" in self.model_fields_set:
            _dict['last_print_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cartridge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serial": obj.get("serial"),
            "machine_type_id": obj.get("machine_type_id"),
            "material": obj.get("material"),
            "initial_volume_ml": obj.get("initial_volume_ml"),
            "volume_dispensed_ml": obj.get("volume_dispensed_ml"),
            "dispense_count": obj.get("dispense_count"),
            "write_count": obj.get("write_count"),
            "mechanical_version": obj.get("mechanical_version"),
            "manufacture_date": obj.get("manufacture_date"),
            "manufacturer": obj.get("manufacturer"),
            "display_name": obj.get("display_name"),
            "lot_number": obj.get("lot_number"),
            "last_modified": obj.get("last_modified"),
            "is_empty": obj.get("is_empty"),
            "inside_printer": obj.get("inside_printer"),
            "connected_group": obj.get("connected_group"),
            "created_at": obj.get("created_at"),
            "last_print_date": obj.get("last_print_date")
        })
        return _obj


