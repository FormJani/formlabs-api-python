# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from formlabs_web_api.models.my_print_run_read_only import MyPrintRunReadOnly
from formlabs_web_api.models.printer_group import PrinterGroup
from formlabs_web_api.models.type_enum import TypeEnum
from typing import Optional, Set
from typing_extensions import Self

class UserEventReadOnly(BaseModel):
    """
    UserEventReadOnly
    """ # noqa: E501
    id: StrictInt
    printer: Optional[StrictStr]
    created_at: datetime
    print_run: MyPrintRunReadOnly
    tank: Optional[StrictStr]
    cartridge: Optional[StrictStr]
    type: TypeEnum
    type_label: StrictStr
    action: StrictStr
    message: StrictStr
    was_read: StrictBool
    group: PrinterGroup
    __properties: ClassVar[List[str]] = ["id", "printer", "created_at", "print_run", "tank", "cartridge", "type", "type_label", "action", "message", "was_read", "group"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserEventReadOnly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "printer",
            "created_at",
            "print_run",
            "tank",
            "cartridge",
            "type",
            "type_label",
            "action",
            "message",
            "was_read",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of print_run
        if self.print_run:
            _dict['print_run'] = self.print_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # set to None if printer (nullable) is None
        # and model_fields_set contains the field
        if self.printer is None and "printer" in self.model_fields_set:
            _dict['printer'] = None

        # set to None if tank (nullable) is None
        # and model_fields_set contains the field
        if self.tank is None and "tank" in self.model_fields_set:
            _dict['tank'] = None

        # set to None if cartridge (nullable) is None
        # and model_fields_set contains the field
        if self.cartridge is None and "cartridge" in self.model_fields_set:
            _dict['cartridge'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserEventReadOnly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "printer": obj.get("printer"),
            "created_at": obj.get("created_at"),
            "print_run": MyPrintRunReadOnly.from_dict(obj["print_run"]) if obj.get("print_run") is not None else None,
            "tank": obj.get("tank"),
            "cartridge": obj.get("cartridge"),
            "type": obj.get("type"),
            "type_label": obj.get("type_label"),
            "action": obj.get("action"),
            "message": obj.get("message"),
            "was_read": obj.get("was_read"),
            "group": PrinterGroup.from_dict(obj["group"]) if obj.get("group") is not None else None
        })
        return _obj


