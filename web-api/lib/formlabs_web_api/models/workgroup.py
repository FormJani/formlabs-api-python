# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from formlabs_web_api.models.group_invitation import GroupInvitation
from formlabs_web_api.models.workgroup_membership import WorkgroupMembership
from formlabs_web_api.models.workgroup_settings import WorkgroupSettings
from typing import Optional, Set
from typing_extensions import Self

class Workgroup(BaseModel):
    """
    Workgroup
    """ # noqa: E501
    id: StrictStr
    name: Annotated[str, Field(strict=True, max_length=40)]
    remote_print_enabled_override: Optional[StrictBool] = None
    created_at: datetime
    memberships: List[WorkgroupMembership]
    printers: List[StrictStr]
    invitations: List[GroupInvitation]
    has_fleet_control: Optional[StrictBool] = None
    has_fleet_control_updated_by: Optional[StrictInt] = None
    settings: WorkgroupSettings
    __properties: ClassVar[List[str]] = ["id", "name", "remote_print_enabled_override", "created_at", "memberships", "printers", "invitations", "has_fleet_control", "has_fleet_control_updated_by", "settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workgroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_at",
            "memberships",
            "printers",
            "invitations",
            "settings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in memberships (list)
        _items = []
        if self.memberships:
            for _item_memberships in self.memberships:
                if _item_memberships:
                    _items.append(_item_memberships.to_dict())
            _dict['memberships'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invitations (list)
        _items = []
        if self.invitations:
            for _item_invitations in self.invitations:
                if _item_invitations:
                    _items.append(_item_invitations.to_dict())
            _dict['invitations'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # set to None if has_fleet_control_updated_by (nullable) is None
        # and model_fields_set contains the field
        if self.has_fleet_control_updated_by is None and "has_fleet_control_updated_by" in self.model_fields_set:
            _dict['has_fleet_control_updated_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workgroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "remote_print_enabled_override": obj.get("remote_print_enabled_override"),
            "created_at": obj.get("created_at"),
            "memberships": [WorkgroupMembership.from_dict(_item) for _item in obj["memberships"]] if obj.get("memberships") is not None else None,
            "printers": obj.get("printers"),
            "invitations": [GroupInvitation.from_dict(_item) for _item in obj["invitations"]] if obj.get("invitations") is not None else None,
            "has_fleet_control": obj.get("has_fleet_control"),
            "has_fleet_control_updated_by": obj.get("has_fleet_control_updated_by"),
            "settings": WorkgroupSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None
        })
        return _obj


