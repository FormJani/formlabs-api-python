# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from formlabs_web_api.models.developer_apimy_printer_machine_type_id_enum import DeveloperAPIMyPrinterMachineTypeIdEnum
from formlabs_web_api.models.developer_apimy_printer_total_number_of_prints import DeveloperAPIMyPrinterTotalNumberOfPrints
from formlabs_web_api.models.my_deep_printer_status import MyDeepPrinterStatus
from formlabs_web_api.models.printer_cartridge_status import PrinterCartridgeStatus
from formlabs_web_api.models.printer_group import PrinterGroup
from formlabs_web_api.models.printer_tank_status import PrinterTankStatus
from typing import Optional, Set
from typing_extensions import Self

class DeveloperAPIMyPrinter(BaseModel):
    """
    DeveloperAPIMyPrinter
    """ # noqa: E501
    serial: StrictStr
    machine_type_id: DeveloperAPIMyPrinterMachineTypeIdEnum = Field(description="Available values are: `FORM-1-0` - Form 1   `FORM-1-1` - Form 1+   `FORM-2-0` - Form 2   `FORM-2-1` - Form 2.1   `FORM-3-0` - Form 3   `FORM-3-1` - Form 3   `FORM-3-2` - Form 3+   `DGJR-1-0` - Form 3   `FRML-3-0` - Form 3L   `FRBL-3-0` - Form 3BL   `FRMB-3-0` - Form 3B   `DGSR-1-0` - Form 3L   `FRMB-3-1` - Form 3B+   `PILK-1-0` - Fuse 1   `SIFT-1` - Sift   `UNKNOWN` - Unknown   `PILK-1-1` - Fuse 1   `SIFT-1-0` - Sift   `SIFT-1-1` - Sift   `CURL-1-1` - Cure L   `CURL-1-0` - Cure L   `WSHL-1-0` - Wash L   `FS30-1-0` - Fuse 1+ (30W)   `FS30-1-1` - Fuse 1+ (30W)   `FORM-4-0` - Form 4")
    total_print_time_ms: StrictInt
    total_number_of_prints: DeveloperAPIMyPrinterTotalNumberOfPrints
    printer_status: MyDeepPrinterStatus
    cartridge_status: PrinterCartridgeStatus
    tank_status: PrinterTankStatus
    group: PrinterGroup
    previous_print_run: Dict[str, Any]
    firmware_version: StrictStr
    location: Optional[StrictStr] = Field(description="This is a user defined physical location of the printer")
    __properties: ClassVar[List[str]] = ["serial", "machine_type_id", "total_print_time_ms", "total_number_of_prints", "printer_status", "cartridge_status", "tank_status", "group", "previous_print_run", "firmware_version", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeveloperAPIMyPrinter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "serial",
            "machine_type_id",
            "total_print_time_ms",
            "printer_status",
            "cartridge_status",
            "tank_status",
            "group",
            "previous_print_run",
            "firmware_version",
            "location",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_number_of_prints
        if self.total_number_of_prints:
            _dict['total_number_of_prints'] = self.total_number_of_prints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of printer_status
        if self.printer_status:
            _dict['printer_status'] = self.printer_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cartridge_status
        if self.cartridge_status:
            _dict['cartridge_status'] = self.cartridge_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tank_status
        if self.tank_status:
            _dict['tank_status'] = self.tank_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeveloperAPIMyPrinter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serial": obj.get("serial"),
            "machine_type_id": obj.get("machine_type_id"),
            "total_print_time_ms": obj.get("total_print_time_ms"),
            "total_number_of_prints": DeveloperAPIMyPrinterTotalNumberOfPrints.from_dict(obj["total_number_of_prints"]) if obj.get("total_number_of_prints") is not None else None,
            "printer_status": MyDeepPrinterStatus.from_dict(obj["printer_status"]) if obj.get("printer_status") is not None else None,
            "cartridge_status": PrinterCartridgeStatus.from_dict(obj["cartridge_status"]) if obj.get("cartridge_status") is not None else None,
            "tank_status": PrinterTankStatus.from_dict(obj["tank_status"]) if obj.get("tank_status") is not None else None,
            "group": PrinterGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "previous_print_run": obj.get("previous_print_run"),
            "firmware_version": obj.get("firmware_version"),
            "location": obj.get("location")
        })
        return _obj


