# coding: utf-8

"""
    Formlabs Developer API

    The Formlabs Dashboard Developer API provides resources to integrate Formlabs products into customerâ€™s workflow and existing systems

    The version of the OpenAPI document: 0.1.0
    Contact: api-inquiry@formlabs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from formlabs_web_api.models.paginated_user_event_read_only_list import PaginatedUserEventReadOnlyList

from formlabs_web_api.api_client import ApiClient, RequestSerialized
from formlabs_web_api.api_response import ApiResponse
from formlabs_web_api.rest import RESTResponseType


class EventsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def events_list(
        self,
        cartridge: Annotated[Optional[StrictStr], Field(description="Filter by resin cartridge serial")] = None,
        date__gt: Annotated[Optional[datetime], Field(description="Filter by date greater than date specified (ISO 8601 Format)")] = None,
        date__lt: Annotated[Optional[datetime], Field(description="Filter by date less than date specified (ISO 8601 Format)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        print_run: Annotated[Optional[StrictStr], Field(description="Filter by print id")] = None,
        printer: Annotated[Optional[StrictStr], Field(description="Filter by printer serial")] = None,
        tank: Annotated[Optional[StrictStr], Field(description="Filter by resin tank serial")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by Event Type `RESIN_LOW` or `PRINT_START` or `PRINT_FINISHED` or `PRINT_ABORTED` or `PRINT_ERROR` or `PRINT_PAUSED` or `PRINT_RESUMED` or `PRINT_RESOLUTION_REQUEST` or `PRINT_RESOLUTION` or `MANY_PRINT_ERRORS` or `PASSWORD_RESET` or `PRINTER_REGISTERED` or `PRINTER_DEREGISTERED` ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PaginatedUserEventReadOnlyList:
        """events_list

        List of all events associated with my account

        :param cartridge: Filter by resin cartridge serial
        :type cartridge: str
        :param date__gt: Filter by date greater than date specified (ISO 8601 Format)
        :type date__gt: datetime
        :param date__lt: Filter by date less than date specified (ISO 8601 Format)
        :type date__lt: datetime
        :param page: A page number within the paginated result set.
        :type page: int
        :param per_page: Number of results to return per page.
        :type per_page: int
        :param print_run: Filter by print id
        :type print_run: str
        :param printer: Filter by printer serial
        :type printer: str
        :param tank: Filter by resin tank serial
        :type tank: str
        :param type: Filter by Event Type `RESIN_LOW` or `PRINT_START` or `PRINT_FINISHED` or `PRINT_ABORTED` or `PRINT_ERROR` or `PRINT_PAUSED` or `PRINT_RESUMED` or `PRINT_RESOLUTION_REQUEST` or `PRINT_RESOLUTION` or `MANY_PRINT_ERRORS` or `PASSWORD_RESET` or `PRINTER_REGISTERED` or `PRINTER_DEREGISTERED` 
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_list_serialize(
            cartridge=cartridge,
            date__gt=date__gt,
            date__lt=date__lt,
            page=page,
            per_page=per_page,
            print_run=print_run,
            printer=printer,
            tank=tank,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedUserEventReadOnlyList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def events_list_with_http_info(
        self,
        cartridge: Annotated[Optional[StrictStr], Field(description="Filter by resin cartridge serial")] = None,
        date__gt: Annotated[Optional[datetime], Field(description="Filter by date greater than date specified (ISO 8601 Format)")] = None,
        date__lt: Annotated[Optional[datetime], Field(description="Filter by date less than date specified (ISO 8601 Format)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        print_run: Annotated[Optional[StrictStr], Field(description="Filter by print id")] = None,
        printer: Annotated[Optional[StrictStr], Field(description="Filter by printer serial")] = None,
        tank: Annotated[Optional[StrictStr], Field(description="Filter by resin tank serial")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by Event Type `RESIN_LOW` or `PRINT_START` or `PRINT_FINISHED` or `PRINT_ABORTED` or `PRINT_ERROR` or `PRINT_PAUSED` or `PRINT_RESUMED` or `PRINT_RESOLUTION_REQUEST` or `PRINT_RESOLUTION` or `MANY_PRINT_ERRORS` or `PASSWORD_RESET` or `PRINTER_REGISTERED` or `PRINTER_DEREGISTERED` ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PaginatedUserEventReadOnlyList]:
        """events_list

        List of all events associated with my account

        :param cartridge: Filter by resin cartridge serial
        :type cartridge: str
        :param date__gt: Filter by date greater than date specified (ISO 8601 Format)
        :type date__gt: datetime
        :param date__lt: Filter by date less than date specified (ISO 8601 Format)
        :type date__lt: datetime
        :param page: A page number within the paginated result set.
        :type page: int
        :param per_page: Number of results to return per page.
        :type per_page: int
        :param print_run: Filter by print id
        :type print_run: str
        :param printer: Filter by printer serial
        :type printer: str
        :param tank: Filter by resin tank serial
        :type tank: str
        :param type: Filter by Event Type `RESIN_LOW` or `PRINT_START` or `PRINT_FINISHED` or `PRINT_ABORTED` or `PRINT_ERROR` or `PRINT_PAUSED` or `PRINT_RESUMED` or `PRINT_RESOLUTION_REQUEST` or `PRINT_RESOLUTION` or `MANY_PRINT_ERRORS` or `PASSWORD_RESET` or `PRINTER_REGISTERED` or `PRINTER_DEREGISTERED` 
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_list_serialize(
            cartridge=cartridge,
            date__gt=date__gt,
            date__lt=date__lt,
            page=page,
            per_page=per_page,
            print_run=print_run,
            printer=printer,
            tank=tank,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedUserEventReadOnlyList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def events_list_without_preload_content(
        self,
        cartridge: Annotated[Optional[StrictStr], Field(description="Filter by resin cartridge serial")] = None,
        date__gt: Annotated[Optional[datetime], Field(description="Filter by date greater than date specified (ISO 8601 Format)")] = None,
        date__lt: Annotated[Optional[datetime], Field(description="Filter by date less than date specified (ISO 8601 Format)")] = None,
        page: Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None,
        per_page: Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None,
        print_run: Annotated[Optional[StrictStr], Field(description="Filter by print id")] = None,
        printer: Annotated[Optional[StrictStr], Field(description="Filter by printer serial")] = None,
        tank: Annotated[Optional[StrictStr], Field(description="Filter by resin tank serial")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Filter by Event Type `RESIN_LOW` or `PRINT_START` or `PRINT_FINISHED` or `PRINT_ABORTED` or `PRINT_ERROR` or `PRINT_PAUSED` or `PRINT_RESUMED` or `PRINT_RESOLUTION_REQUEST` or `PRINT_RESOLUTION` or `MANY_PRINT_ERRORS` or `PASSWORD_RESET` or `PRINTER_REGISTERED` or `PRINTER_DEREGISTERED` ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """events_list

        List of all events associated with my account

        :param cartridge: Filter by resin cartridge serial
        :type cartridge: str
        :param date__gt: Filter by date greater than date specified (ISO 8601 Format)
        :type date__gt: datetime
        :param date__lt: Filter by date less than date specified (ISO 8601 Format)
        :type date__lt: datetime
        :param page: A page number within the paginated result set.
        :type page: int
        :param per_page: Number of results to return per page.
        :type per_page: int
        :param print_run: Filter by print id
        :type print_run: str
        :param printer: Filter by printer serial
        :type printer: str
        :param tank: Filter by resin tank serial
        :type tank: str
        :param type: Filter by Event Type `RESIN_LOW` or `PRINT_START` or `PRINT_FINISHED` or `PRINT_ABORTED` or `PRINT_ERROR` or `PRINT_PAUSED` or `PRINT_RESUMED` or `PRINT_RESOLUTION_REQUEST` or `PRINT_RESOLUTION` or `MANY_PRINT_ERRORS` or `PASSWORD_RESET` or `PRINTER_REGISTERED` or `PRINTER_DEREGISTERED` 
        :type type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._events_list_serialize(
            cartridge=cartridge,
            date__gt=date__gt,
            date__lt=date__lt,
            page=page,
            per_page=per_page,
            print_run=print_run,
            printer=printer,
            tank=tank,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedUserEventReadOnlyList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _events_list_serialize(
        self,
        cartridge,
        date__gt,
        date__lt,
        page,
        per_page,
        print_run,
        printer,
        tank,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if cartridge is not None:
            
            _query_params.append(('cartridge', cartridge))
            
        if date__gt is not None:
            if isinstance(date__gt, datetime):
                _query_params.append(
                    (
                        'date__gt',
                        date__gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date__gt', date__gt))
            
        if date__lt is not None:
            if isinstance(date__lt, datetime):
                _query_params.append(
                    (
                        'date__lt',
                        date__lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('date__lt', date__lt))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if per_page is not None:
            
            _query_params.append(('per_page', per_page))
            
        if print_run is not None:
            
            _query_params.append(('print_run', print_run))
            
        if printer is not None:
            
            _query_params.append(('printer', printer))
            
        if tank is not None:
            
            _query_params.append(('tank', tank))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/developer/v1/events/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


